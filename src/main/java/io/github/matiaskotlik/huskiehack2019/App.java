/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.matiaskotlik.huskiehack2019;

import io.github.matiaskotlik.huskiehack2019.ai.SentimentAnalysis;
import org.nanohttpd.protocols.http.IHTTPSession;
import org.nanohttpd.protocols.http.NanoHTTPD;
import org.nanohttpd.protocols.http.request.Method;
import org.nanohttpd.protocols.http.response.Response;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

public class App extends NanoHTTPD {
	private Template loginTmp;
	private Template btnTmp;

	private ComplimentStorage complimentStorage;

	private Set<String> users;

	private SessionList sessionList;

	private Response response404;

	private SentimentAnalysis sentimentAnalysis;

	public App(int port) {
		super(port);

		sessionList = new SessionList();

		users = new HashSet<>();

		loginTmp = getTemplate("/index.html");
		btnTmp = getTemplate("/buttonpage.html");

		complimentStorage = new ComplimentStorage();

		sentimentAnalysis = new SentimentAnalysis();

		response404 = Response.newFixedLengthResponse("Error 404 File Not Found");
	}

	public Session getSession(IHTTPSession ihttpSession) {
		return sessionList.getSession(getSessionId(ihttpSession));
	}

	public String getSessionId(IHTTPSession ihttpSession) {
		String id = ihttpSession.getCookies().read("session");
		id = id == null ? UUID.randomUUID().toString() : id;
		setSessionId(ihttpSession, id);
		return id;
	}

	public void setSessionId(IHTTPSession ihttpSession, String id) {
		ihttpSession.getCookies().set("session", id, Integer.MAX_VALUE);
	}

	public Map<String, String> getSessionDataMap(Session session) {
		Map<String, String> map = new HashMap<>();
		if (session.getName() != null) {
			map.put("name", session.getName());
		}
		return map;
	}

	@Override
	public Response serve(IHTTPSession ihttpSession) {
		Method method = ihttpSession.getMethod();
		String uri = ihttpSession.getUri();

		if (method.equals(Method.POST)) {
			try {
				ihttpSession.parseBody(new HashMap<>());
			} catch (IOException e) {
				System.err.println("Could not parse body");
			} catch (ResponseException e) {
				System.err.println("ResponseException when trying to parse body");
			}
		}

		if (uri.equals("/")) {
			Session session = getSession(ihttpSession);
			if (session.getName() != null) {
				return ss(btnTmp.render(getSessionDataMap(session)));
			} else {
				return ss(loginTmp.render(getSessionDataMap(session)));
			}
		} else if (uri.equals("/signin")) {
			Session session = getSession(ihttpSession);
			String name = ihttpSession.getParms().get("name");
			session.setName(name);
			users.add(name);
			return redirect("/");
		} else if (uri.equals("/give")) {
			String name = ihttpSession.getParms().get("name");
			String compliment = ihttpSession.getParms().get("compliment");
			if (name != null && compliment != null) {
				if (users.contains(name)) {
					System.out.println("analyzing " + compliment);
					if (sentimentAnalysis.sentiment(compliment)) {
						complimentStorage.store(name, compliment);
						return ss("Your compliment was sent!");
					} else {
						return ss("Either your compliment is shit or our AI is, but either way, go fuck yourself.");
					}
				} else {
					return ss("That user does not exist. Maybe you spelled it wrong?");
				}
			}
		} else if (uri.equals("/get")) {
			String name = getSession(ihttpSession).getName();
			System.out.println("getting compliment for name: " + name);
			if (name != null) {
				String compliment = complimentStorage.get(name);
				return compliment == null ? ss("You have no compliments.") : ss(compliment);
			}
		} else if (uri.equals("/list")) {
			StringBuilder listBuilder = new StringBuilder().append("[");
			users.forEach(user -> listBuilder.append("\"").append(user).append("\","));
			return ss(listBuilder.substring(0, listBuilder.length()-1) + "]");
		}
		return response404;
	}

	public Response redirect(String uri) {
		return Response.newFixedLengthResponse("<script>window.location.replace(\"" + uri +"\");</script>");
	}

	public Response ss(String msg) {
		return Response.newFixedLengthResponse(msg);
	}

	public static void main(String[] args) {
		int port = 0;
		if (args.length == 1) {
			port = Integer.parseInt(args[0]);
		} else {
			port = 8080;
		}
		App app = new App(port);
		System.out.println("Starting server...");
		try {
			app.start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);
		} catch (IOException e) {
			System.err.println("Couldn't start server.");
			e.printStackTrace();
		}
	}

	public Template getTemplate(String path) {
		try {
			return new Template(getResource(path));
		} catch (IOException e) {
			System.err.println("Could not open resource at path " + path);
		}
		return new Template("Could not open resource");
	}

	public String getResource(String path) throws IOException {
		InputStream in = getClass().getResourceAsStream(path);
		return inputStreamToString(in);
	}

	public String inputStreamToString(InputStream inputStream) throws IOException {
		try(ByteArrayOutputStream result = new ByteArrayOutputStream()) {
			byte[] buffer = new byte[1024];
			int length;
			while ((length = inputStream.read(buffer)) != -1) {
				result.write(buffer, 0, length);
			}
			return result.toString("UTF-8");
		}
	}
}
